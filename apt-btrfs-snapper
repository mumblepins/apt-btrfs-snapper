#!/usr/bin/python3
# Copyright (C) 2011 Canonical
#
# Author:
#  Michael Vogt
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import argparse
import gettext
import logging
import os
import sys
from gettext import gettext as _

from apt_btrfs_snapper import AptBtrfsSnapper

if __name__ == "__main__":

    gettext.bindtextdomain("apt-btrfs-snapper")

    # command line parser
    description = _("Filesystem snapshot support for apt using snapper")
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--debug", action="store_true", default=False,
                        help="enable debug output")
    subparser = parser.add_subparsers(title="Commands")

    # supported
    command = subparser.add_parser(
        "supported", help=_("Print if snapshots are supported"))
    command.set_defaults(command="supported")
    # list
    command = subparser.add_parser(
        "list", help=_("List available snapshots"))
    command.set_defaults(command="list")
    # snapshot
    command = subparser.add_parser(
        "snapshot", help=_("Create a new snapshot"))
    command.set_defaults(command="snapshot")
    # snapshot-pre
    command = subparser.add_parser(
        "pre-snap", help=_("Create a new snapshot before installing packages"))
    command.set_defaults(command="pre-snap")
    # snapshot-post
    command = subparser.add_parser(
        "post-snap", help=_("Create a new snapshot after installing packages"))
    command.set_defaults(command="post-snap")
    # restore
    command = subparser.add_parser(
        "restore", help=_("Revert to previous snapshot"))
    command.add_argument("snapshot")
    command.set_defaults(command="restore")
    # delete
    command = subparser.add_parser(
        "delete", help=_("Delete snapshot"))
    command.add_argument("snapshot")
    command.set_defaults(command="delete")
    # list-older-than
    command = subparser.add_parser(
        "list-older-than", help=_("Show snapshots older than N days"))
    command.add_argument("time")
    command.set_defaults(command="list-older-than")
    # delete-older-than
    command = subparser.add_parser(
        "delete-older-than", help=_("Delete snapshots older than N days"))
    command.add_argument("time")
    # diff
    command = subparser.add_parser(
        "diff", help=_("Show what was changed between a snapshot and now"))
    command.set_defaults(command="diff")
    command.add_argument("presnapshot")
    command.add_argument("postsnapshot")
    # userdata
    command = subparser.add_parser(
        "userdata", help=_("To be used by the system to add the packages "
                           "installed to the snapshot"))
    command.set_defaults(command="userdata")

    # parse args
    args = parser.parse_args()

    # global options
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if os.getuid() != 0:
        print(_("Sorry, you need to be root to run this program"))
        sys.exit(1)

    apt_btrfs = AptBtrfsSnapper()
    if not apt_btrfs.snapshots_supported():
        print(_("The system does not support apt-btrfs-snapper"))
        sys.exit(1)
    res = False
    try:
        if args.command == "supported":
            res = apt_btrfs.snapshots_supported()
            if res:
                print(_("Supported"))
            else:
                print(_("Not supported"))
        elif args.command == "snapshot":
            res = apt_btrfs.create_btrfs_root_snapshot()
        elif args.command == "pre-snap":
            res = apt_btrfs.create_btrfs_root_snapshot_pre()
        elif args.command == "post-snap":
            res = apt_btrfs.create_btrfs_root_snapshot_post()
        elif args.command == "list":
            res = apt_btrfs.print_btrfs_root_snapshots()
        elif args.command == "restore":
            res = apt_btrfs.command_set_default(args.snapshot)
        elif args.command == "delete":
            res = apt_btrfs.delete_snapshot(args.snapshot)
        elif args.command == "list-older-than":
            res = apt_btrfs.print_btrfs_root_snapshots_older_than(args.time)
        elif args.command == "delete-older-than":
            res = apt_btrfs.clean_btrfs_root_snapshots_older_than(args.time)
        elif args.command == "diff":
            res = apt_btrfs.show_diff(args.presnapshot, args.postsnapshot)
        elif args.command == "userdata":
            res = apt_btrfs.update_installed_packages()
        else:
            print(_("ERROR: Unhandled command: '%s'") % args.command)
    except AttributeError as e:
        print(parser.print_help())

        # return the right exit code
    if res:
        sys.exit(0)
    else:
        sys.exit(1)
